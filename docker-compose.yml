version: '3'

#vars: &default-vars
#  restart: unless-stopped

services:
  grafana:
    container_name: grafana
    image: grafana/grafana
    depends_on:
      - prometheus
    volumes: 
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - grafana_data:/var/lib/grafana
    networks:
      - frontend
    ports: 
      - 3000:3000
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: ${GF_USERS_ALLOW_SIGN_UP}
    labels:
      - flame.type=application
      - flame.url=http://localhost:3000
      - flame.name='Grafana'
    restart: unless-stopped
    
  prometheus:
    container_name: prometheus
    image: prom/prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - frontend
    ports: 
      - 9090:9090
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    labels:
      - flame.type=application
      - flame.url=http://localhost:9090/targets
      - flame.name='Prometheus'
    restart: unless-stopped
    
  node-exporter:
    container_name: node-exporter
    image: prom/node-exporter
    depends_on:
      - prometheus
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro    
    networks:
      - frontend
    ports: 
      - 9100:9100
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    labels:
      - flame.type=application
      - flame.url=http://localhost:9100/metrics
      - flame.name='Node Exporter'
    restart: unless-stopped
    
  portainer:
    container_name: portainer
    image: portainer/portainer-ce
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - frontend
    ports:
      - 8000:8000
      - 9443:9443
    labels:
      - flame.type=application
      - flame.url=https://localhost:9443
      - flame.name='Portainer'
    restart: unless-stopped
    
  pihole:
    container_name: pihole
    image: pihole/pihole
    networks:
      - frontend    
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "67:67/udp"
      - "80:80/tcp"
    environment:
      TZ: ${TZ}
      WEBPASSWORD: ${WEBPASSWORD}
    labels:
      - flame.type=application
      - flame.url=http://localhost/admin
      - flame.name='PiHole'
    restart: unless-stopped
  
  pihole-exporter:
    container_name: pihole-exporter
    image: ekofr/pihole-exporter
    depends_on:
      - prometheus
      - pihole
    networks:
      - frontend
    ports:
      - 9617:9617
    environment:
      PIHOLE_HOSTNAME: ${PIHOLE_HOSTNAME}
      PIHOLE_PASSWORD: ${PIHOLE_PASSWORD}
    labels:
      - flame.type=application
      - flame.url=http://localhost:9617/metrics
      - flame.name='PiHole Exporter'
    restart: unless-stopped
  
  flame:
    container_name: flame
    image: pawelmalak/flame
    volumes:
      - flame_data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - frontend
    ports:
      - 5005:5005
    environment:
      PASSWORD: ${FLAMEPASSWORD}
    restart: unless-stopped
    
volumes:
    prometheus_data: {}
    grafana_data: {}
    portainer_data: {}
    flame_data: {}
    
networks:
  frontend: {}